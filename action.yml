# https://semver.org/

name: "Semantic version from string"
author: "@Steffo99"
description: "Split a string into its semantic version numbers."
branding:
  icon: "tag"
  color: "blue"

inputs:
  string:
    description: "The string to split into semantic version numbers."
    required: true

outputs:
  full:
    description: "The full semantic version (`1.2.3-beta+ABCDEF`)."
    value: ${{ steps.semver.outputs.full }}
  precedence:
    description: "The semantic version with metadata excluded (`1.2.3-beta`)."
    value: ${{ steps.semver.outputs.precedence }}
  core:
    description: "The semantic version core (`1.2.3`)."
    value: ${{ steps.semver.outputs.core }}
  pair:
    description: "The semantic version core, excluding the patch version (`1.2`)."
    value: ${{ steps.semver.outputs.pair }}
  major:
    description: "The major version (`1`)."
    value: ${{ steps.semver.outputs.major }}
  minor:
    description: "The minor version (`2`)."
    value: ${{ steps.semver.outputs.minor }}
  patch:
    description: "The patch version (`3`)."
    value: ${{ steps.semver.outputs.patch }}
  prerelease:
    description: "The pre-release field contents (`beta`)."
    value: ${{ steps.semver.outputs.prerelease }}
  metadata:
    description: "The metadata field contents (`ABCDEF`)."
    value: ${{ steps.semver.outputs.metadata }}

runs:
  using: composite
  
  steps:
    - name: "‚ùì Find the release semantic version"
      id: semver
      run: |
        set -e

        input=${{ inputs.string }}
        regex='(((([0-9]+)[.]([0-9]+))[.]([0-9]+))(-([a-zA-Z0-9.]+))?)(\+([a-zA-Z0-9.]+))?'
        
        echo "Input string: ${INPUT_STRING}" 

        if [[ ${INPUT_STRING} =~ $regex ]]
        then
          echo "full: ${BASH_REMATCH[0]}"
          echo "precedence: ${BASH_REMATCH[1]}"
          echo "core: ${BASH_REMATCH[2]}"
          echo "pair: ${BASH_REMATCH[3]}"
          echo "major: ${BASH_REMATCH[4]}"
          echo "minor: ${BASH_REMATCH[5]}"
          echo "patch: ${BASH_REMATCH[6]}"
          echo "prerelease: ${BASH_REMATCH[8]}"
          echo "metadata: ${BASH_REMATCH[10]}"

          echo "::set-output name=full::${BASH_REMATCH[0]}"
          echo "::set-output name=precedence::${BASH_REMATCH[1]}"
          echo "::set-output name=core::${BASH_REMATCH[2]}"
          echo "::set-output name=pair::${BASH_REMATCH[3]}"
          echo "::set-output name=major::${BASH_REMATCH[4]}"
          echo "::set-output name=minor::${BASH_REMATCH[5]}"
          echo "::set-output name=patch::${BASH_REMATCH[6]}"
          echo "::set-output name=prerelease::${BASH_REMATCH[8]}"
          echo "::set-output name=metadata::${BASH_REMATCH[10]}"
        else
          echo "Failed to detect a semantic version."
          exit 1
        fi
      shell: bash
